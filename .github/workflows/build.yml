name: CMake Build Matrix
on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]
  schedule: # This trigger is here only to make sure
    - cron: '17 0 * * SUN' # the example itself doesn't become stale
jobs:
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # будет запускаться по очереди на всех типах машин
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            system: "windows",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019"
          }
          - {
            name: "Windows Latest MinGW",
            system: "windows",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_Latest_GCC",
            system: "linux",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_GCC_9",
            system: "linux",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc9.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "macOS Latest Clang",
            system: "macosx",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }
    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472 # Find the latest version on this page:
      # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache LLVM and Clang
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: |
            C:/Program Files/LLVM
            ./llvm
          key: llvm-3.5
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "3.5"
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}
      - name: Symlink libclang.so (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          sudo ln -s libclang-11.so.1 /lib/x86_64-linux-gnu/libclang.so
        working-directory: ${{ env.LLVM_PATH }}/lib
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner and build wrapper windows
        if: startsWith(matrix.config.system, 'win')
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}.zip
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-win-x86.zip
        run: |
          New-Item -Force -ItemType directory -Path $HOME\.sonar
          curl -sSLo $HOME\.sonar\sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\sonar-scanner.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-windows\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          curl -sSLo $HOME\.sonar\build-wrapper.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\build-wrapper.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\build-wrapper-win-x86" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8

      - name: Download and set up sonar-scanner and build wrapper linux/macosx
        if: false == startsWith(matrix.config.system, 'win')
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}.zip
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-${{ matrix.config.system }}-x86.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}/bin" >> $GITHUB_PATH
          curl -sSLo $HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86" >> $GITHUB_PATH
      - name: Install linux dependencies
        if: startsWith(matrix.config.system, 'linux')
        run: |
          sudo apt install mesa-common-dev libgl1-mesa-dev libgles2-mesa-dev
      - name: Get latest CMake and ninja
        # Using 'latest' branch, the most recent CMake and ninja are installed.
        uses: lukka/get-cmake@latest
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Get windows developing environment setup right
        uses: ilammy/msvc-dev-cmd@v1
      - name: Run build-wrapper linux/macosx
        if: false == startsWith(matrix.config.system, 'win')
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt install -y g++-11
          sudo apt-get install -y ninja-build
          echo "ninja=${{ which ninja }}" >> $ninja
          echo "gpp11=${{ which g++-11 }}" >> $gpp11
          mkdir cmake-build-release
          cmake -S . \
          -B cmake-build-release \
          -DCMAKE_CXX_COMPILER=${{ env.gpp11 }} \
          -DCMAKE_MAKE_PROGRAM=${{ env.ninja }} \
          -DCMAKE_CXX_STANDARD=20 \
          -DCMAKE_CXX_STANDARD_REQUIRED=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_EXTENSIONS=OFF \
          -G Ninja
          build-wrapper-${{ matrix.config.system }}-x86 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset ninja-multi-vcpkg-debug
      - name: Run build-wrapper windows
        if: startsWith(matrix.config.system, 'win')
        run: |
          cmake --preset ninja-multi-vcpkg
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset ninja-multi-vcpkg-debug
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
