name: CMake Build Matrix
on:
  push:
    branches:
      - master
  pull_request:
    types: [ opened, synchronize, reopened ]
  schedule: # This trigger is here only to make sure
    - cron: '17 0 * * SUN' # the example itself doesn't become stale
jobs:
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} # будет запускаться по очереди на всех типах машин
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MSVC",
            system: "windows",
            os: windows-latest,
            artifact: "windows_msvc.7z",
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            archiver: "7z a",
            generators: "Visual Studio 16 2019"
          }
          - {
            name: "Windows Latest MinGW",
            system: "windows",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_Latest_GCC",
            system: "linux",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "Ubuntu_GCC_9",
            system: "linux",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc9.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja"
          }
          - {
            name: "macOS Latest Clang",
            system: "macosx",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja"
          }
    env:
      SONAR_SCANNER_VERSION: 4.6.2.2472 # Find the latest version on this page:
      # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Download and set up sonar-scanner and build wrapper windows
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}.zip
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-win-x86.zip
        if: startsWith(matrix.config.system, 'win')
        run: |
          New-Item -Force -ItemType directory -Path $HOME\.sonar
          curl -sSLo $HOME\.sonar\sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\sonar-scanner.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-windows\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          curl -sSLo $HOME\.sonar\build-wrapper.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME\.sonar\build-wrapper.zip -d $HOME\.sonar\
          echo "$HOME\.sonar\build-wrapper-win-x86" | Out-File -Append -FilePath ${{ env:GITHUB_PATH }} -Encoding utf8
      - name: Download and set up sonar-scanner and build wrapper linux/macosx
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}.zip
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-${{ matrix.config.system }}-x86.zip
        if: !startsWith(matrix.config.system, 'win')
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-${{ matrix.config.system }}/bin" >> $GITHUB_PATH
          curl -sSLo $HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-${{ matrix.config.system }}-x86" >> $GITHUB_PATH
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          ninja --version
          cmake --version
          cd $HOME
          Invoke-WebRequest https://github.com/microsoft/winget-cli/releases/download/v1.1.12653/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle
          winget install --id Git.Git -e --source winget
          winget install -e --id Microsoft.VisualStudio.2022.Community
          git clone https://github.com/microsoft/vcpkg
          .\vcpkg\bootstrap-vcpkg.bat
          cd vcpkg
          vcpkg install glew:x64-windows-static
          vcpkg install sdl2:x64-windows-static
          vcpkg install sdl2-mixer:x64-windows-static
          vcpkg install freetype:x64-windows-static
          vcpkg install glm:x64-windows-static
          git clone https://github.com/cgaueb/sgg.git
          cmake -B build -G Ninja -DCMAKE_MAKE_PROGRAM=Ninja -DCMAKE_BUILD_TYPE=Release \
                          -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON \
                          -DCMAKE_TOOLCHAIN_FILE=/path/to/vcpkg/directory/scripts/buildsystems/vcpkg.cmake \
                          -DVCPKG_TARGET_TRIPLET=x64-windows-static
          cmake --build build --target install
        # cmd "${{ matrix.config.environment_script }}"

      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build cmake gcc git
          ninja --version
          cmake --version
          gcc --version
          cd $HOME
          git clone https://github.com/microsoft/vcpkg
          sh ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install glew:x64-linux
          ./vcpkg/vcpkg install sdl2:x64-linux
          ./vcpkg/vcpkg install sdl2-mixer:x64-linux
          ./vcpkg/vcpkg install freetype:x64-linux
          ./vcpkg/vcpkg install glm:x64-linux
          cd $HOME
          git clone https://github.com/cgaueb/sgg.git
          cd sgg
          cmake -B build -G Ninja -DCMAKE_MAKE_PROGRAM=Ninja -G Ninja -DCMAKE_BUILD_TYPE=Release \
                          -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON \
                          -DCMAKE_TOOLCHAIN_FILE=~/scripts/buildsystems/vcpkg.cmake \
                          -DVCPKG_TARGET_TRIPLET=x64-linux
          cmake --build build --target install
      - name: Install dependencies on ubuntu9
        if: startsWith(matrix.config.name, 'Ubuntu_GCC_9')
        run: |
          echo Update gcc-9 =======================================================================
          echo gcc version before
          gcc --version
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install ninja-build cmake gcc-9 g++-9
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          echo gcc version after
          gcc --version
          echo Update ninja =======================================================================
          echo ninja version before
          ninja --version
          # wget https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip
          wget https://github.com/ninja-build/ninja/releases/latest/download/ninja-linux.zip
          sudo unzip ninja-linux.zip -d /usr/local/bin/
          sudo update-alternatives --install /usr/bin/ninja ninja /usr/local/bin/ninja 1 --force
          echo ninja version after
          ninja --version
          echo Update cmake =======================================================================
          echo cmake version before
          cmake --version
          # curl --silent "https://api.github.com/repos/Kitware/CMake/releases/latest" | sed -n 's/.*tag_name":\s"\(.*\)".*/\1/p' | head -2
          # wget https://github.com/Kitware/CMake/releases/latest/download/cmake-3.16.5-Linux-x86_64.sh
          cmake_version=$(curl --silent "https://api.github.com/repos/Kitware/CMake/releases/latest" | sed -n 's/.*tag_name":\s"\(.*\)".*/\1/p' | head -2 | cut -c 2-)
          echo cmake download latest v$cmake_version version
          wget https://github.com/Kitware/CMake/releases/download/v$cmake_version/cmake-$cmake_version-Linux-x86_64.sh
          chmod +x cmake-$cmake_version-Linux-x86_64.sh
          sudo mkdir /opt/cmake
          sudo ./cmake-$cmake_version-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
          sudo update-alternatives --install /usr/bin/cmake cmake /opt/cmake/bin/cmake 1 --force
          echo cmake version after
          cmake --version
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja git gcc
          ninja --version
          cmake --version
          cd $HOME
          git clone https://github.com/microsoft/vcpkg
          sh ./vcpkg/bootstrap-vcpkg.sh
          ./vcpkg/vcpkg install glew:x64-osx
          ./vcpkg/vcpkg install sdl2:x64-osx
          ./vcpkg/vcpkg install sdl2-mixer:x64-osx
          ./vcpkg/vcpkg install freetype:x64-osx
          ./vcpkg/vcpkg install glm:x64-osx
          cd $HOME
          git clone https://github.com/cgaueb/sgg.git
          cd sgg
          cmake -B build -G Ninja -DCMAKE_MAKE_PROGRAM=Ninja -G Ninja -DCMAKE_BUILD_TYPE=Release \
                          -DCMAKE_EXPORT_PACKAGE_REGISTRY=ON \
                          -DCMAKE_TOOLCHAIN_FILE=~/scripts/buildsystems/vcpkg.cmake \
                          -DVCPKG_TARGET_TRIPLET=x64-osx
          cmake --build build --target install
      - name: Run build-wrapper linux/macosx
        if: !startsWith(matrix.config.system, "win")
        run: |
          mkdir build
          cmake -S . -B build -G Ninja
          build-wrapper-${{ matrix.config.system }}-x86 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run build-wrapper windows
        if: startsWith(matrix.config.system, "win")
        run: |
          New-Item -ItemType directory -Path build
          cmake -S . -B build -G Ninja
          build-wrapper-win-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build build/ --config Release
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
